name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      variant:
        description: "Build variant"
        type: choice
        options: [debug, release]
        default: debug
      artifact_type:
        description: "What to build"
        type: choice
        options: [apk, aab]
        default: apk
      run_lint:
        description: "Run Android Lint?"
        type: boolean
        default: true
      run_tests:
        description: "Run unit tests?"
        type: boolean
        default: true
      gradle_args:
        description: "Extra Gradle args (optional)"
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '17'
      APP_MODULE: app
      WRAPPER_GRADLE_VERSION: '8.7'
      GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx3g -XX:MaxMetaspaceSize=1g' -Dorg.gradle.warning.mode=all"
      FFMPEGKIT_AAR_URL: ${{ secrets.FFMPEGKIT_AAR_URL }}  # <-- set this secret to enable FFmpegKit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Ensure Gradle Wrapper (auto-install Gradle if missing)
        run: |
          set -e
          if [[ ! -f gradlew ]]; then
            curl -s https://get.sdkman.io | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle $WRAPPER_GRADLE_VERSION
            gradle wrapper --gradle-version $WRAPPER_GRADLE_VERSION
          fi
          chmod +x gradlew

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # ðŸ”½ Optional: fetch FFmpegKit AAR from your URL (GitHub Release, S3, etc.)
      - name: Fetch FFmpegKit AAR (optional)
        run: |
          mkdir -p app/libs
          if [[ -n "$FFMPEGKIT_AAR_URL" ]]; then
            echo "Downloading FFmpegKit AAR from: $FFMPEGKIT_AAR_URL"
            curl -L "$FFMPEGKIT_AAR_URL" -o app/libs/ffmpeg-kit.aar
            ls -lh app/libs || true
          else
            echo "FFMPEGKIT_AAR_URL not set; building without FFmpegKit."
          fi

      - name: Resolve inputs
        id: cfg
        run: |
          echo "variant=${{ github.event.inputs.variant || 'debug' }}" >> "$GITHUB_OUTPUT"
          echo "artifact_type=${{ github.event.inputs.artifact_type || 'apk' }}" >> "$GITHUB_OUTPUT"
          echo "run_lint=${{ github.event.inputs.run_lint || 'true' }}" >> "$GITHUB_OUTPUT"
          echo "run_tests=${{ github.event.inputs.run_tests || 'true' }}" >> "$GITHUB_OUTPUT"
          echo "gradle_args=${{ github.event.inputs.gradle_args }}" >> "$GITHUB_OUTPUT"

      - name: Gradle sanity check
        continue-on-error: true
        run: |
          ./gradlew --version
          ./gradlew help -S

      - name: Resolve dependency trees
        run: |
          VARIANT="${{ steps.cfg.outputs.variant }}"
          ./gradlew :app:dependencies --configuration compile${VARIANT^}Classpath --stacktrace 2>&1 | tee deps-${VARIANT}-compile.log
          ./gradlew :app:dependencies --configuration runtime${VARIANT^}Classpath --stacktrace 2>&1 | tee deps-${VARIANT}-runtime.log

      - name: Build (with log capture)
        run: |
          set -e
          VARIANT="${{ steps.cfg.outputs.variant }}"
          TYPE="${{ steps.cfg.outputs.artifact_type }}"
          EXTRA="${{ steps.cfg.outputs.gradle_args }}"
          if [[ "$TYPE" == "aab" && "$VARIANT" == "debug" ]]; then TYPE="apk"; fi
          if [[ "$TYPE" == "apk" ]]; then TASK="assemble${VARIANT^}"; else TASK="bundleRelease"; fi
          echo "Running: ./gradlew $TASK $EXTRA"
          ./gradlew $TASK $EXTRA --stacktrace 2>&1 | tee gradle-build.log

      - name: Lint
        if: ${{ steps.cfg.outputs.run_lint == 'true' }}
        run: ./gradlew lint${{ steps.cfg.outputs.variant == 'release' && 'Release' || 'Debug' }} --stacktrace 2>&1 | tee gradle-lint.log

      - name: Unit tests
        if: ${{ steps.cfg.outputs.run_tests == 'true' }}
        run: ./gradlew test${{ steps.cfg.outputs.variant == 'release' && 'Release' || 'Debug' }}UnitTest --stacktrace 2>&1 | tee gradle-tests.log

      - name: Upload APK (if built)
        if: ${{ steps.cfg.outputs.artifact_type == 'apk' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.cfg.outputs.variant }}-apk
          path: ${{ env.APP_MODULE }}/build/outputs/apk/${{ steps.cfg.outputs.variant }}/*.apk

      - name: Upload AAB (if built)
        if: ${{ steps.cfg.outputs.artifact_type == 'aab' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: ${{ env.APP_MODULE }}/build/outputs/bundle/release/*.aab

      - name: Upload Gradle logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: |
            deps-*-compile.log
            deps-*-runtime.log
            gradle-build.log
            gradle-lint.log
            gradle-tests.log
