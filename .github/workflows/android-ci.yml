name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      variant:
        description: "Build variant"
        type: choice
        options: [debug, release]
        default: debug
        required: true
      artifact_type:
        description: "What to build"
        type: choice
        options: [apk, aab]
        default: apk
        required: true
      run_lint:
        description: "Run Android Lint?"
        type: boolean
        default: true
      run_tests:
        description: "Run unit tests?"
        type: boolean
        default: true
      gradle_args:
        description: "Extra Gradle args (optional)"
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '17'
      APP_MODULE: app
      WRAPPER_GRADLE_VERSION: '8.7'
      GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx3g -XX:MaxMetaspaceSize=1g' -Dorg.gradle.warning.mode=all"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Ensure Gradle Wrapper (auto-install Gradle if missing)
        shell: bash
        run: |
          set -e
          if [[ ! -f gradlew ]]; then
            echo "Gradle wrapper missing â€” installing via SDKMAN and generating wrapper..."
            curl -s https://get.sdkman.io | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle $WRAPPER_GRADLE_VERSION
            gradle wrapper --gradle-version $WRAPPER_GRADLE_VERSION
          fi
          chmod +x gradlew

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Resolve inputs
        id: cfg
        shell: bash
        run: |
          VARIANT="${{ github.event.inputs.variant || 'debug' }}"
          TYPE="${{ github.event.inputs.artifact_type || 'apk' }}"
          RUN_LINT="${{ github.event.inputs.run_lint || 'true' }}"
          RUN_TESTS="${{ github.event.inputs.run_tests || 'true' }}"
          EXTRA_ARGS="${{ github.event.inputs.gradle_args }}"
          echo "variant=$VARIANT" >> "$GITHUB_OUTPUT"
          echo "artifact_type=$TYPE" >> "$GITHUB_OUTPUT"
          echo "run_lint=$RUN_LINT" >> "$GITHUB_OUTPUT"
          echo "run_tests=$RUN_TESTS" >> "$GITHUB_OUTPUT"
          echo "gradle_args=$EXTRA_ARGS" >> "$GITHUB_OUTPUT"

      - name: Gradle sanity check
        continue-on-error: true
        run: |
          ./gradlew --version
          ./gradlew help -S

      - name: Build (with full log + refresh deps)
        shell: bash
        run: |
          set -e
          VARIANT="${{ steps.cfg.outputs.variant }}"
          TYPE="${{ steps.cfg.outputs.artifact_type }}"
          EXTRA="${{ steps.cfg.outputs.gradle_args }}"

          # Pick Gradle task explicitly (no ${VARIANT^} bash trick)
          if [[ "$TYPE" == "apk" ]]; then
            if [[ "$VARIANT" == "release" ]]; then
              TASK="assembleRelease"
            else
              TASK="assembleDebug"
            fi
          else
            # AAB only supported for release in standard setups
            TASK="bundleRelease"
          fi

          echo "Running: ./gradlew $TASK $EXTRA --refresh-dependencies"
          ./gradlew $TASK $EXTRA --stacktrace --refresh-dependencies 2>&1 | tee gradle-build.log

      - name: Lint
        if: ${{ steps.cfg.outputs.run_lint == 'true' }}
        run: ./gradlew ${{ steps.cfg.outputs.variant == 'release' && 'lintRelease' || 'lintDebug' }} --stacktrace 2>&1 | tee gradle-lint.log

      - name: Unit tests
        if: ${{ steps.cfg.outputs.run_tests == 'true' }}
        run: ./gradlew ${{ steps.cfg.outputs.variant == 'release' && 'testReleaseUnitTest' || 'testDebugUnitTest' }} --stacktrace 2>&1 | tee gradle-tests.log

      - name: Show outputs tree (debugging)
        if: always()
        run: |
          echo "=== app/build/outputs ==="
          ls -R ${{ env.APP_MODULE }}/build/outputs || true
          echo "=== app/build/intermediates/apk ==="
          ls -R ${{ env.APP_MODULE }}/build/intermediates/apk || true

      # Primary explicit uploads
      - name: Upload APK (explicit paths)
        if: ${{ steps.cfg.outputs.artifact_type == 'apk' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.cfg.outputs.variant }}-apk
          path: |
            ${{ env.APP_MODULE }}/build/outputs/apk/${{ steps.cfg.outputs.variant }}/*.apk
            ${{ env.APP_MODULE }}/build/outputs/apk/**/${{ steps.cfg.outputs.variant }}/*.apk
          if-no-files-found: ignore

      - name: Upload AAB (explicit path)
        if: ${{ steps.cfg.outputs.artifact_type == 'aab' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: |
            ${{ env.APP_MODULE }}/build/outputs/bundle/release/*.aab
          if-no-files-found: ignore

      # Fallback sweep (catch any APK/AAB anywhere under outputs)
      - name: Upload any APK/AAB (fallback sweep)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: built-artifacts-sweep
          path: |
            ${{ env.APP_MODULE }}/build/outputs/**/*.apk
            ${{ env.APP_MODULE }}/build/outputs/**/*.aab
          if-no-files-found: ignore

      - name: Upload Gradle logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: |
            gradle-build.log
            gradle-lint.log
            gradle-tests.log
